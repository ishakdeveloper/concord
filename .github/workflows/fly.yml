name: Fly Deploy
on:
  push:
    branches:
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging
      - dev

jobs:
  test-web:
    name: Test Web App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.15.4'
          run_install: false

      # Create isolated environment
      - name: Setup Environment
        run: |
          # Create isolated directories
          PNPM_DIR="${{ github.workspace }}/.pnpm"
          mkdir -p "$PNPM_DIR"/{store,cache,home}

          # Set permissions
          sudo chmod -R 755 "$PNPM_DIR"
          sudo chown -R $(whoami) "$PNPM_DIR"

          # Prevent lost+found access
          sudo chmod -r /lost+found 2>/dev/null || true

          # Export variables
          echo "PNPM_DIR=$PNPM_DIR" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          # Configure pnpm to use isolated directories
          pnpm config set store-dir "$PNPM_DIR/store"
          pnpm config set cache-dir "$PNPM_DIR/cache"
          pnpm config set home "$PNPM_DIR/home"

          # Install with all safeguards
          SKIP_LOST_FOUND=true PNPM_LOGLEVEL=debug pnpm install \
            --frozen-lockfile=false \
            --prefer-offline \
            --ignore-scripts \
            --shamefully-hoist \
            --no-verify-store-integrity \
            --include-workspace-root
        env:
          CI: true
          PNPM_HOME: ${{ github.workspace }}/.pnpm
          NODE_OPTIONS: '--max_old_space_size=4096'
          XDG_CACHE_HOME: ${{ github.workspace }}/.cache
          npm_config_cache: ${{ github.workspace }}/.npm
          SKIP_LOST_FOUND: 'true'
          HOME: ${{ github.workspace }}/.pnpm/home

      - name: Run Web Tests
        working-directory: ./web
        run: pnpm test

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        working-directory: ./server
        run: bun install

      - name: Run Server Tests
        working-directory: ./server
        run: bun test

  deploy-production:
    name: Deploy Production
    needs: [test-web, test-server]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_environment
    env:
      PROD_API_URL: https://concord-api.fly.dev
      PROD_WEB_URL: https://concord-web.fly.dev
      PROD_WS_URL: wss://concord-ws.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      # Deploy API first
      - name: Deploy API to Production
        run: |
          # Set secrets first
          flyctl secrets set \
            DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
            DISCORD_CLIENT_ID="${{ secrets.PROD_DISCORD_CLIENT_ID }}" \
            DISCORD_CLIENT_SECRET="${{ secrets.PROD_DISCORD_CLIENT_SECRET }}" \
            GOOGLE_CLIENT_ID="${{ secrets.PROD_GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}" \
            GITHUB_CLIENT_ID="${{ secrets.PROD_GITHUB_CLIENT_ID }}" \
            GITHUB_CLIENT_SECRET="${{ secrets.PROD_GITHUB_CLIENT_SECRET }}" \
            BETTER_AUTH_SECRET="${{ secrets.PROD_BETTER_AUTH_SECRET }}" \
            --app concord-api

          # Run database migrations locally first
          cd server && bun install && bun run db:push

          # Then deploy without release command
          flyctl deploy --remote-only --app concord-api \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env URL="${PROD_API_URL}" \
            --env CORS_ORIGIN="${PROD_WEB_URL}" \
            --env ALLOWED_ORIGINS="${PROD_WEB_URL},${PROD_WS_URL}" \
            --env NODE_ENV="production" \
            --skip-release-command
        working-directory: ./server
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

      # Deploy WebSocket server
      - name: Deploy WebSocket to Production
        run: |
          # Install Erlang and Elixir from Ubuntu repos
          sudo apt-get update
          sudo apt-get install -y erlang elixir

          # Deploy with increased timeout
          flyctl deploy --remote-only --app concord-ws \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env URL="${PROD_WS_URL}" \
            --env CORS_ORIGIN="${PROD_WEB_URL}" \
            --env MIX_ENV="prod" \
            --strategy immediate \
            --wait-timeout 300
        working-directory: ./ws
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Then deploy Web
      - name: Deploy Web to Production
        run: |
          # Install pnpm for web deployment
          npm install -g pnpm@8.15.4

          # Deploy web app directly from web directory
          cd web
          flyctl deploy --remote-only --app concord-web \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env NEXT_PUBLIC_URL="${PROD_WEB_URL}" \
            --env NEXT_PUBLIC_API_URL="${PROD_API_URL}" \
            --env NEXT_PUBLIC_WS_URL="${PROD_WS_URL}" \
            --env NODE_ENV="production"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-staging:
    name: Deploy Staging
    needs: [test-web, test-server]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    concurrency: staging_environment
    env:
      STAGING_API_URL: https://staging.api.concord.fly.dev
      STAGING_WEB_URL: https://staging.concord.fly.dev
      STAGING_WS_URL: wss://staging.ws.concord.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      # Deploy API first
      - name: Deploy API to Staging
        run: |
          # Set secrets first
          flyctl secrets set \
            DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" \
            DISCORD_CLIENT_ID="${{ secrets.STAGING_DISCORD_CLIENT_ID }}" \
            DISCORD_CLIENT_SECRET="${{ secrets.STAGING_DISCORD_CLIENT_SECRET }}" \
            GOOGLE_CLIENT_ID="${{ secrets.STAGING_GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}" \
            GITHUB_CLIENT_ID="${{ secrets.STAGING_GITHUB_CLIENT_ID }}" \
            GITHUB_CLIENT_SECRET="${{ secrets.STAGING_GITHUB_CLIENT_SECRET }}" \
            --app concord-api-staging

          # Then deploy
          flyctl deploy --remote-only --app concord-api-staging \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env URL="${STAGING_API_URL}" \
            --env CORS_ORIGIN="${STAGING_WEB_URL}" \
            --env ALLOWED_ORIGINS="${STAGING_WEB_URL},${STAGING_WS_URL}" \
            --env NODE_ENV="production"
        working-directory: ./server
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Deploy WebSocket server
      - name: Deploy WebSocket to Staging
        run: |
          flyctl deploy --remote-only --app concord-ws-staging \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env URL="${STAGING_WS_URL}" \
            --env CORS_ORIGIN="${STAGING_WEB_URL}" \
            --env NODE_ENV="production"
        working-directory: ./ws
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # Then deploy Web
      - name: Deploy Web to Staging
        run: |
          flyctl deploy --remote-only --app concord-web-staging \
            --dockerfile Dockerfile \
            --config fly.toml \
            --env NEXT_PUBLIC_URL="${STAGING_WEB_URL}" \
            --env NEXT_PUBLIC_API_URL="${STAGING_API_URL}" \
            --env NEXT_PUBLIC_WS_URL="${STAGING_WS_URL}" \
            --env NODE_ENV="production"
        working-directory: ./web
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
