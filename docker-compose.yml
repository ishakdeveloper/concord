version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: web/Dockerfile
      target: build
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - web/.env.docker
    volumes:
      - ./web:/app/web
      - ./package.json:/app/package.json
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - web_node_modules:/app/node_modules
      - web_next_cache:/app/web/.next
      - ./.husky:/app/.husky
      - ./.git:/app/.git
    command: sh -c "cd /app/web && npm install && npm run dev"
    depends_on:
      - server

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - '3001:8080'
    environment:
      - PORT=8080
      - NODE_ENV=development
    env_file:
      - .env.docker
    volumes:
      - ./server:/app
      - server_node_modules:/app/node_modules
    depends_on:
      db:
        condition: service_healthy

  ws:
    build:
      context: ./ws
      dockerfile: Dockerfile
    ports:
      - '4001:8080'
    environment:
      - PORT=8080
      - MIX_ENV=dev
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - ws_build:/app/_build
      - ws_deps:/app/deps
    depends_on:
      - server

  db:
    image: postgres:16-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=concord_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  uploads:
  web_node_modules:
  server_node_modules:
  web_next_cache:
  ws_build:
  ws_deps:
